---
title: 'Xarray'
format:
  html:
    toc: true
    toc-location: left
    theme: simpelex
jupyter: python3
echo: true
---


## Working with Spatio-temporal Data

In this tutorial we  will be looking at sea surface temperatures using Community Earth System Model 2 (CESM2) data.  This tutorial borrows heavily from [this tutorial](https://comptools.climatematch.io/tutorials/W1D1_ClimateSystemOverview/student/W1D1_Tutorial5.html) by Computational Tools in Climate Science.  That tutorial has much more information about climatology, the focus here is using Xarray for data cubes.

This is [gridded](https://nsidc.org/data/user-resources/help-center/guide-ease-grids#:~:text=The%20EASE%20Grids%20utilize%20an,the%20temperate%20and%20global%20projections.) climate data given in lat, lon coordinates.  In the rioXarray tutorials we will learn to deal with projections etc...

First import libraries and download dataset.

```{python}
import matplotlib.pyplot as plt
import numpy as np
import xarray as xr
from pythia_datasets import DATASETS
import matplotlib.pyplot as plt


filepath = DATASETS.fetch('CESM2_sst_data.nc')
```

Open the dataset and inspect.  It is an Xarray Dataset.  It has coordinates lat, lon, and time.  It has corresponding indices  It has spatial and time coordinates, hence we call it a spatio-temporal dataset.

```{python}
ds = xr.open_dataset(filepath)
ds
```

You can subset the data along an axis with slicing (here we explicitly create a slice object)

```{python}
ds.sel(
    time=slice('2004-01-01', '2004-12-31')
)
```

Check out the attributes (you can click the drop down arrows).  Notice the units are degrees C.  If you wanted the temperature in Kelvins you can change them very much as you would change a column in Pandas.

```{python}
ds.tos + 273.15
```
Boom Kelvins! 

::: { .callout-note }
Do you notice all of those NaNs?  This is sea surface temperature, so where there is land, there is no data.
:::

## Aggregations

A common thing to do in performing various types of analysis is to apply aggregations such as `.sum()`, `.mean()`, `.median()`, `.min()`, or `.max()`.  These methods can be used to reduce data to provide insights into the nature of a large dataset. For example, one might want to calculate the  minimum temperature for each cell (temporal minimum).

```{python}
global_min = ds.tos.min(dim='time')
global_min
```

Pay attention to the dimensions of the above output.  We have collapsed the time dimension using the `.min()` method, so we are left with a 2D grid of lat and lon.

```{python}

fig, ax  = plt.subplots();
title = f'Minimum annual SST {ds.time.min().item().year} - {ds.time.max().item().year}'
global_min.plot(cmap='inferno', ax=ax, cbar_kwargs={'label': 'degrees C'});
ax.set_title(title );
```

We could also aggregate spatially, for instance we could find the mean the sea surface temperature across the entire grid at eac time step, leaving us with a 1D timeseries of mean temperatures.
 
```{python}
t_mean = ds.tos.mean(dim=["lat", "lon"])
t_mean

fig, ax  = plt.subplots();
t_mean.plot()

title = f'Global Mean SST {ds.time.min().item().year} - {ds.time.max().item().year}'
ax.set_title(title);
ax.set_ylabel('degrees C');
ax.set_xlabel('Year');

```

::: { .callout-note title="Exercise"}
Now that you know how to slice and aggregate, find and plot a map of maximum SST for the year 2005
:::

```{python}
ds.sel(
    time=slice('2004-01-01', '2004-12-31')
).tos.min(dim="time").plot(cmap='inferno', ax=ax, cbar_kwargs={'label': 'degrees C'})


```

Ok