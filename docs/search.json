[
  {
    "objectID": "lidR.html",
    "href": "lidR.html",
    "title": "",
    "section": "",
    "text": "# install.packages('lidR')\nlibrary(lidR) \n\nfile_name &lt;- 'laz/bishops_peak.laz'\nlas &lt;- readLAS(file_name)\nlas\n\nclass        : LAS (v1.2 format 3)\nmemory       : 965.3 Mb \nextent       : 164301.3, 165700.3, 3910030, 3911429 (xmin, xmax, ymin, ymax)\ncoord. ref.  : NAD83 / UTM zone 11N \narea         : 1.89 km²\npoints       : 13.32 million points\ndensity      : 7.05 points/m²\ndensity      : 5.63 pulses/m²\nInvalid data is not uncommon when it comes to aerial lidar. It is a good idea to check the file integrity before starting.\nlas_check(las)\n\n\n Checking the data\n  - Checking coordinates...\u001b[0;32m ✓\u001b[0m\n  - Checking coordinates type...\u001b[0;32m ✓\u001b[0m\n  - Checking coordinates range...\u001b[0;32m ✓\u001b[0m\n  - Checking coordinates quantization...\u001b[0;32m ✓\u001b[0m\n  - Checking attributes type...\u001b[0;32m ✓\u001b[0m\n  - Checking ReturnNumber validity...\u001b[0;32m ✓\u001b[0m\n  - Checking NumberOfReturns validity...\u001b[0;32m ✓\u001b[0m\n  - Checking ReturnNumber vs. NumberOfReturns...\u001b[0;32m ✓\u001b[0m\n  - Checking RGB validity...\u001b[0;32m ✓\u001b[0m\n  - Checking absence of NAs...\u001b[0;32m ✓\u001b[0m\n  - Checking duplicated points...\n \u001b[1;33m   ⚠ 17152 points are duplicated and share XYZ coordinates with other points\u001b[0m\n  - Checking degenerated ground points...\n \u001b[1;33m   ⚠ There were 123 degenerated ground points. Some X Y Z coordinates were repeated\u001b[0m\n \u001b[1;33m   ⚠ There were 609 degenerated ground points. Some X Y coordinates were repeated but with different Z coordinates\u001b[0m\n  - Checking attribute population...\u001b[0;32m ✓\u001b[0m\n  - Checking gpstime incoherances\u001b[0;32m ✓\u001b[0m\n  - Checking flag attributes...\u001b[0;32m ✓\u001b[0m\n  - Checking user data attribute...\u001b[0;32m ✓\u001b[0m\n Checking the header\n  - Checking header completeness...\u001b[0;32m ✓\u001b[0m\n  - Checking scale factor validity...\u001b[0;32m ✓\u001b[0m\n  - Checking point data format ID validity...\u001b[0;32m ✓\u001b[0m\n  - Checking extra bytes attributes validity...\u001b[0;32m ✓\u001b[0m\n  - Checking the bounding box validity...\u001b[0;32m ✓\u001b[0m\n  - Checking coordinate reference system...\u001b[0;32m ✓\u001b[0m\n Checking header vs data adequacy\n  - Checking attributes vs. point format...\u001b[0;32m ✓\u001b[0m\n  - Checking header bbox vs. actual content...\u001b[0;32m ✓\u001b[0m\n  - Checking header number of points vs. actual content...\u001b[0;32m ✓\u001b[0m\n  - Checking header return number vs. actual content...\u001b[0;32m ✓\u001b[0m\n Checking coordinate reference system...\n  - Checking if the CRS was understood by R...\u001b[0;32m ✓\u001b[0m\n Checking preprocessing already done \n  - Checking ground classification...\u001b[0;32m yes\u001b[0m\n  - Checking normalization...\u001b[0;31m no\u001b[0m\n  - Checking negative outliers...\n \u001b[1;33m   ⚠ 31 points below 0\u001b[0m\n  - Checking flightline classification...\u001b[0;32m yes\u001b[0m\n Checking compression\n  - Checking attribute compression...\n   -  Synthetic_flag is compressed\n   -  Keypoint_flag is compressed\n   -  Withheld_flag is compressed\n   -  UserData is compressed\nNotice that there are points marked as withheld. Withheld points are typically points that are suspicious or have something wrong with them. There ae not many in the point cloud, so we can safely drop them. We will do this by adding the filter=\"-drop_withheld\" parameter to read_las()."
  },
  {
    "objectID": "lidR.html#point-records",
    "href": "lidR.html#point-records",
    "title": "",
    "section": "Point Records",
    "text": "Point Records\nIn a lidar file, the following attribute will always be included for points.\n\n\n\n\n\n\n\n\n\nItem\nFormat\nSize\nRequired\n\n\n\n\nX\nlong\n4 bytes\nyes\n\n\nY\nlong\n4 bytes\nyes\n\n\nZ\nlong\n4 bytes\nyes\n\n\nIntensity\nunsigned short\n2 bytes\nno\n\n\nReturnNumber\n3 bits (bits 0–2)\n3 bits\nyes\n\n\nNumber of Returns (Given Pulse)\n3 bits (bits 3–5)\n3 bits\nyes\n\n\nScanDirectionFlag\n1 bit (bit 6)\n1 bit\nyes\n\n\nEdgeofFlightLine\n1 bit (bit 7)\n1 bit\nyes\n\n\nClassification\nunsigned char\n1 byte\nyes\n\n\nScanAngleRank (-90 to +90)\nsigned char\n1 byte\nyes\n\n\nUserData\nunsigned char\n1 byte\nno\n\n\nPointSourceID\nunsigned short\n2 bytes\nyes\n\n\n\nSometimes there are other records associated with points, e.g. HeightAboveGround.\nHere we do not need all of the attributes for the points. For many applications things like ScanAngleRank, are not useful.\nBelow we load only the x, y, z, intensity, number of returns, return number and classification.\nWe will also filter duplicates, as they can cause problems.\n\nlas &lt;- readLAS(\n  file_name, select=\"xyzinrc\",filter=\"-drop_withheld\"\n)\nlas &lt;- filter_duplicates(las)\n\nThe below will plot the point cloud in a 3D interactive window (if you are suing Rstudio, it would be possible in other IDEs as well, but things involving R usually require painstaking configuration).\n\nplot(las)\n\n\nlibrary(ggplot2)\n\n# some points (found in QGIS)\np1 &lt;- c(165002.6378679913, 3911266.6643020255)\np2 &lt;- c(165067.0078679913, 3910900.6643020255)\n\n# transect\nlas_tr &lt;- clip_transect(las, p1, p2, width = 5, xz = TRUE)\n\n# plot\nggplot(payload(las_tr), aes(X,Z, color = Z)) + \n  geom_point(size = 0.5) + \n  coord_equal() + \n  theme_minimal() +\n  scale_color_gradientn(colours = height.colors (50))"
  }
]