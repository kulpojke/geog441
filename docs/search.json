[
  {
    "objectID": "python_geospatial_basics.html#vector-data",
    "href": "python_geospatial_basics.html#vector-data",
    "title": "GEOG 441 - Lecture 1",
    "section": "Vector Data",
    "text": "Vector Data\n\nMost often we interact with vector data using GeoPandas\n\nGeoPandas is an extension of Pandas.\nUses Fiona, which in-turn relies on GDAL and OGR, to read and write.\nVector data is handled by the Shapely module, which relies on GEOS.\nGEOS implements the OGC Simple Features geometry\n\nProjections are managed by pyproj which is built upon PROJ"
  },
  {
    "objectID": "python_geospatial_basics.html#pandas",
    "href": "python_geospatial_basics.html#pandas",
    "title": "GEOG 441 - Lecture 1",
    "section": "Pandas",
    "text": "Pandas"
  },
  {
    "objectID": "python_geospatial_basics.html#shapely",
    "href": "python_geospatial_basics.html#shapely",
    "title": "GEOG 441 - Lecture 1",
    "section": "Shapely",
    "text": "Shapely\n\nShapely Geometric Objects consist of coordinate tuples:\n\nPoint - (x, y) or three dimensional (x, y, z)\nLineString\nPolygon"
  },
  {
    "objectID": "python_geospatial_basics.html#a-plot",
    "href": "python_geospatial_basics.html#a-plot",
    "title": "GEOG 441 - Lecture 1",
    "section": "A plot",
    "text": "A plot\nPython\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n\n\n\n\n\n\n\n\nFigureÂ 1: A line plot on a polar axis"
  }
]