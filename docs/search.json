[
  {
    "objectID": "python_geospatial_basics.html#this-slideshow",
    "href": "python_geospatial_basics.html#this-slideshow",
    "title": "GEOG 441 - Lecture 1",
    "section": "This slideshow",
    "text": "This slideshow\nTODO: GDAL intro slaideshow before this\n\nIntroducing Python\nBasic Geospatial Manipulations"
  },
  {
    "objectID": "python_geospatial_basics.html#why-learn-python",
    "href": "python_geospatial_basics.html#why-learn-python",
    "title": "GEOG 441 - Lecture 1",
    "section": "Why learn Python",
    "text": "Why learn Python\n\nIt allows for more flexibility that a GUI based GIS program.\nOther GIS applications (e.g. QGIS, ArcGIS, postGIS) often have a Python interface.\ngenerally a widely used language."
  },
  {
    "objectID": "python_geospatial_basics.html#vector-data",
    "href": "python_geospatial_basics.html#vector-data",
    "title": "GEOG 441 - Lecture 1",
    "section": "Vector Data",
    "text": "Vector Data\nMost often we interact with vector data using GeoPandas + GeoPandas is an extension of Pandas. + Uses Fiona, which in-turn relies on GDAL and OGR, to read and write. + Vector is handled by the Shapely module, which relies on GEOS. + GEOS implements the OGC Simple Features geometry"
  },
  {
    "objectID": "python_geospatial_basics.html#a-plot",
    "href": "python_geospatial_basics.html#a-plot",
    "title": "GEOG 441 - Lecture 1",
    "section": "A plot",
    "text": "A plot\nPython\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n\n\n\n\n\n\n\n\nFigure 1: A line plot on a polar axis"
  }
]