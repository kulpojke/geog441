---
title: 'Geospatial Python For Total Beginners'
format:
  revealjs:
    incremental: true 
jupyter: python3
echo: true
output-location: column
navigation-mode: vertical
df-print: paged

---

# Introducing Python
+ Introducing Python
+ Basic Geospatial Manipulations

## Why learn Python

+ It allows for more flexibility than a GUI based GIS program.
+ Other GIS applications (e.g. QGIS, ArcGIS, postGIS) often have a Python interface.
+ generally a widely used language.

## Basic Python data types {.scrollable}

| Type   | Example(s) |
|--------|---------|
| String | `'Dude!'`|
| Float  | `1.2`  |
| Int    | `3` |
| Tuple  | `('x', 'y')`<br>`(1, 2)`<br>`('x', 3.2)` |
| List   | `['x', 'y']`<br>`[1, 2]`<br>Possible but bad --> `['x', 3.2]` |
| Dict   | `{'dogs': 26, 'cats', 100}` |
| etc... | there are others |


## Basic Numbers

Floats and Ints don't do anything all that surprising

```{python}
a = 2 + 2
b = 2.0 + 2.0
c = 2 + 2.0


print(f'a is an {type(a)}')
print(f'b is a {type(b)}')
print(f'c is a {type(c)}')
print(f'a / b is {a / b}')
print(f'5 / 4 is {5 / 4}')
print(f'but 5 // 4 is {5 // 4}')
```

## Sequences
Lists, tuples, and strings ae all sequences
```{python}
# a list
a_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]

# a tuple
a_tup = (1, 2, 3, 4, 5, 6, 7, 8, 9)

# a string
a_str = 'Wil je graag een neushorn?'

# access by index
a = a_list[0]
b = a_list[-1]
c = a_list[4]
print(f'by index:\n 0 --> {a},\n-1 --> {b},\n 4 --> {c}')

# works fro strings to
print('string item at 4 --> ', a_str[4])

# you can slice a list or tuple(remember 0 indexed)
print('\nslices:')
print(a_list[2:5])
print(a_list[8:])
print(a_tup[2:5])
print(a_str[-9:])
```

[Slicing](https://www.geeksforgeeks.org/python-list-slicing/#)  
[Sequences tutorial](https://labex.io/tutorials/python-how-to-manipulate-list-sequences-in-python-419858)  
[Sequence tutorial as video](https://www.youtube.com/watch?v=n3KMrwmq_94)

## Dictionaries

```{python}
pets = {'honden': 26, 'katten': 100}

for key, val in pets.items():
  print(f'{val} {key}')

print(f'{pets["honden"] + pets["katten"]} huisdieren')
```

[More on dictionaries](https://www.w3schools.com/python/python_dictionaries.asp)

## Iterating

```{python}
a = [1, 2, 3, 4, 5, 6, 7, 8, 9]

# use a loop to append squared values to new lists
b = []
for n in a:
  b.append(n**2)

# or, better, use a comprehension
c = [n**2 for n in a]

print(b)
print('is the same as')
print(c)

```

## Vector Data

+ Most often we will interact with vector data using [GeoPandas](https://geopandas.org/en/stable/)  
  + GeoPandas is an extension of [Pandas](https://pandas.pydata.org/).
  + It uses Fiona, which in-turn relies on [GDAL and OGR](https://gdal.org/en/stable/), to read and write.
  + Vector data is handled by the [Shapely](http://toblerity.org/shapely/manual.html) module, which relies on [GEOS](https://libgeos.org/).
  + GEOS  implements the [OGC](https://en.wikipedia.org/wiki/Open_Geospatial_Consortium) [Simple Features geometry](https://en.wikipedia.org/wiki/Simple_Features)
+ Projections are managed by [pyproj](https://pyproj4.github.io/pyproj/stable/) which is built upon [PROJ](https://proj.org/en/stable/)

## Pandas {background-image="docs/pandas.png"}

taken from: FOSS4G 2022 | State of GeoPandas and friends, 9/16/24

## Shapely {.smaller}

+ Shapely Geometric Objects consist of coordinate tuples:
  + Point - (x, y) or three dimensional (x, y, z), e.g. `Point(5.2, 52.1)`
  + LineString - List if coordinates of vertices, e.g.  `LineString([(0, 0), (1, 2)])`
  + Polygon - Basically a closed linestring, e.g.  `Polygon(((0., 0.), (0., 1.), (1., 1.), (1., 0.), (0., 0.)))` 
  + Notice that the first and last coord of the Polygon are the same.
  + More on [Shapely geometries](https://shapely.readthedocs.io/en/stable/geometry.html)

## Polygon
```{python}
from shapely import Polygon

coords = ((0., 0.), (0., 2.), (1., 1.), (1., 0.), (0., 0.))
p = Polygon(coords)

c = p.exterior.coords

print(c[0] == c[-1])
p
```

## Pandas DataFrame {.scrollable}
```{python}
from datetime import datetime, timedelta
from random import uniform
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

# some arbitrary time range 
start_time = datetime(2025, 3, 1, 8, 0, 0)  # 8:00 AM
end_time = datetime(2025, 3, 3, 17, 0, 0)  # 5:00 PM
interval = timedelta(minutes=30)
time_stamps = []
current_time = start_time
while current_time <= end_time:
    time_stamps.append(current_time)
    current_time += interval

# some made up temperature data
temp_c = [
  20 + uniform(-10, 10) + 10 *
  np.sin(2 * np.pi * t.hour / 24)
  for t
  in time_stamps
]

# empty dataframe
df = pd.DataFrame()

# add data
df['date_time'] = time_stamps
df['T (C)'] = temp_c

df.head()
```

## Pandas DataFrame Cont. {.scrollable}

```{python}
from datetime import datetime, timedelta
from random import uniform
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

# some arbitrary time range 
start_time = datetime(2025, 3, 1, 8, 0, 0)  # 8:00 AM
end_time = datetime(2025, 3, 3, 17, 0, 0)  # 5:00 PM
interval = timedelta(minutes=30)
time_stamps = []
current_time = start_time
while current_time <= end_time:
    time_stamps.append(current_time)
    current_time += interval

# some made up temperature data
temp_c = [
  20 + uniform(-10, 10) + 10 *
  np.sin(2 * np.pi * t.hour / 24)
  for t
  in time_stamps
]

# empty dataframe
df = pd.DataFrame()

# add data
df['date_time'] = time_stamps
df['T (C)'] = temp_c

fig, ax = plt.subplots()

# create the scatter plot
plt.scatter(df.date_time, df['T (C)'], marker='x', color = 'k')


# set the x-axis tick labels and rotate them
plt.xticks(rotation=80, ha='right')

# label axes
plt.xlabel('Day and Time')
plt.ylabel('Temperature (C)')
plt.title('Hourly Temperature (C) in West Crabhammer')

# adjust layout to prevent labels from overlapping
plt.tight_layout()

# Show the plot
plt.show()
```

## A  random plot
```{python}
#| label: fig-polar
#| fig-cap: "A line plot on a polar axis"

import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(
  subplot_kw = {'projection': 'polar'} 
)
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.title('What the heck is this polar plot trying to tell us?')
plt.show()
```


# Next Slideshow
