---
title: 'GEOG 441 - Lecture 1'
format:
  revealjs:
    incremental: true 
jupyter: python3
echo: true
output-location: column
navigation-mode: vertical

---

# This slideshow

TODO: GDAL intro slideshow before this

+ Introducing Python
+ Basic Geospatial Manipulations

## Why learn Python

+ It allows for more flexibility than a GUI based GIS program.
+ Other GIS applications (e.g. QGIS, ArcGIS, postGIS) often have a Python interface.
+ generally a widely used language.

## Basic Python data types

| Type   | Example(s) |
|--------|---------|
| String | `'Dude!'`|
| Float  | `1.2`  |
| Int    | `3` |
| Tuple  | `('x', 'y'), (1, 2), ('x', 3.2)` |
| List   | `['x', 'y'], [1, 2]`, Possible but bad --> `['x', 3.2]` |
| Dict   | `{'dogs': 26, 'cats', 100}` |
| etc... | there are others |


## Basic Numbers

Floats and Ints don't do anything all that surprising

```{python}
a = 2 + 2
b = 2.0 + 2.0
c = 2 + 2.0


print(f'a is an {type(a)}')
print(f'b is a {type(b)}')
print(f'c is a {type(c)}')
print(f'a / b is {a / b}')
print(f'5 / 4 is {5 / 4}')
print(f'but 5 // 4 is {5 // 4}')
```

## Sequences

TODO: Show some sewuence stuff

## Vector Data

+ Most often we interact with vector data using [GeoPandas](https://geopandas.org/en/stable/)  
  + GeoPandas is an extension of [Pandas](https://pandas.pydata.org/).
  + Uses Fiona, which in-turn relies on [GDAL and OGR](https://gdal.org/en/stable/), to read and write.
  + Vector data is handled by the [Shapely](http://toblerity.org/shapely/manual.html) module, which relies on [GEOS](https://libgeos.org/).
  + GEOS  implements the [OGC](https://en.wikipedia.org/wiki/Open_Geospatial_Consortium) [Simple Features geometry](https://en.wikipedia.org/wiki/Simple_Features)
+ Projections are managed by [pyproj](https://pyproj4.github.io/pyproj/stable/) which is built upon [PROJ](https://proj.org/en/stable/)

## Pandas
<img src="../img/pandas.png" alt="taken from: FOSS4G 2022 | State of GeoPandas and friends, 9/16/24">

## Shapely

+ Shapely Geometric Objects consist of coordinate tuples:
  + Point - (x, y) or three dimensional (x, y, z)
  + LineString
  + Polygon

## A plot

Python

```{python}
#| label: fig-polar
#| fig-cap: "A line plot on a polar axis"

import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(
  subplot_kw = {'projection': 'polar'} 
)
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```


# Next Slideshow
