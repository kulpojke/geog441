---
title: 'GEOG 441 - Lecture 1'
format:
  revealjs:
    incremental: true 
jupyter: python3
echo: true
output-location: column

---

## This slideshow

TODO: GDAL intro slaideshow before this

+ Introducing Python
+ Basic Geospatial Manipulations

## Why learn Python

+ It allows for more flexibility than a GUI based GIS program.
+ Other GIS applications (e.g. QGIS, ArcGIS, postGIS) often have a Python interface.
+ generally a widely used language.

## Vector Data
Most often we interact with vector data using [GeoPandas](https://geopandas.org/en/stable/)
  + GeoPandas is an extension of [Pandas](https://pandas.pydata.org/).
  + Uses Fiona, which in-turn relies on [GDAL and OGR](https://gdal.org/en/stable/), to read and write.
  + Vector data is handled by the [Shapely](http://toblerity.org/shapely/manual.html) module, which relies on [GEOS](https://libgeos.org/).
    + GEOS  implements the [OGC](https://en.wikipedia.org/wiki/Open_Geospatial_Consortium) [Simple Features geometry](https://en.wikipedia.org/wiki/Simple_Features)
  + Projections are managed by [pyproj](https://pyproj4.github.io/pyproj/stable/) which is built upon [PROJ](https://proj.org/en/stable/)

![taken from: FOSS4G 2022 | State of GeoPandas and friends, 9/16/24](../img/geopandas_ecosystem_opengeo2024.png "GeoPandas is all like...")


## A plot

Python

```{python}
#| label: fig-polar
#| fig-cap: "A line plot on a polar axis"

import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(
  subplot_kw = {'projection': 'polar'} 
)
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```



